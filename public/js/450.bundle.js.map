{"version":3,"file":"./js/450.bundle.js","mappings":"mHAAO,SAASA,IACd,MACI,0BAIC,SAASC,IACd,MACI,0B,gTC0CS,SAASC,IACtB,IAbuBC,EAajBC,GAbiBD,EAagB,KAZhCE,EAAAA,EAAAA,IAAOF,EAAPE,EAAY,kBAAc,CAC/B,qBAAsB,CACpBC,gBAFe,EAAEC,MAEMC,QAAQC,OAAOC,OAGxC,mCAAoC,CAClCC,OAAQ,QAONC,GAAkBP,EAAAA,EAAAA,IAAO,IAAPA,EAAkB,kBAAEE,EAAF,EAAEA,MAAF,kCAClCM,EAAAA,EAAAA,MAA0B,CAC9BP,gBAAiBC,EAAMC,QAAQM,OAAOC,MACtCC,MAAOT,EAAMC,QAAQM,OAAOG,SAHU,qBAKlCJ,EAAAA,EAAAA,MAA0B,CAC9BK,SAAU,KAN4B,KAUpCC,GAAY,OAAc,sBAEhCC,EAAAA,EAAAA,YAAS,iBAAC,4GACkCC,MAAM,GAAD,QAAIrB,EAAAA,EAAAA,KAAJ,+BADvC,cACFsB,EADE,gBAE0BA,EAA4BC,OAFtD,cAEFC,EAFE,gBAIoBH,MAAM,oDAJ1B,cAIFI,EAJE,iBAKWA,EAAcF,OALzB,QAKFG,EALE,OAOFC,EAAYC,EAAAA,SAAAA,QAA0BF,EAAMA,EAAKG,QAAQF,WAAWG,SAC5D,IAAIC,EAAAA,MAAMC,SAASC,eAAe,UAAUC,WAAW,MAAO,CAC1EC,KAAM,aACNT,KAAM,CACJU,OAAQT,EAAUU,KAAI,SAAAC,GAAC,OAAIA,EAAEC,WAAWC,QACxCC,SAAU,CACR,CACEC,MAAO,YACPhB,KAAMF,KAIZmB,QAAS,CACPC,YAAY,EACZC,aAAa,EACbC,eAAe,EACfC,QAAS,CACPC,OAAQ,CACNC,SAAS,IAGbC,OAAQ,CACNC,GAAI,CACFC,WAAY,aAGhBC,YAAa,KAjCT,6CAsCV,OAAyCC,EAAAA,EAAAA,UAAS,eAAD,iBAAgB,sGACxCjC,MAAM,qBADkC,cACzDkC,EADyD,gBAE5CA,EAAShC,OAFmC,cAEzDG,EAFyD,yBAGxDA,GAHwD,4CAAlD8B,GAAf,EAAOC,OAAP,EAAeD,WAAWE,EAA1B,EAA0BA,MAAOhC,EAAjC,EAAiCA,KAMjC,GAAI8B,EACF,OACE,qBAAKG,EAAG,GACN,qBAAOC,EAAG,EAAGC,UAAU,MAAMC,QAAS,GACpC,4BAMR,GAAIJ,EACF,MAAO,0BAA4BA,EAAMK,QAG3C,IAAMC,EAASC,OAAOC,QAAQxC,GAAMW,KAAI,+BAAE8B,EAAF,KAAOC,EAAP,sBAAqBD,EAAMC,MAEnE,OACE,uBAAKC,MAAO,CAACC,SAAU,WAAYC,OAAQ,QAASC,MAAO,UACzD,0BAAQH,MAAO,CAACI,cAAe,QAASC,GAAG,WAC3C,qBAAOb,UAAW1C,EAAY,MAAQ,UACnC6C,EAAO3B,KAAI,SAACsC,EAAOC,GAClB,OACE,qBAAWT,IAAG,gBAAWS,GAASC,GAAI,CAACJ,cAAe,SACpD,qBAAYK,QAAQ,KAAKC,cAAY,EAACC,UAAU,MAC7Cf,OAAOgB,KAAKN,GAAO,IAEtB,yBACE,yBACE,yBACGV,OAAOC,QAAQD,OAAOiB,OAAOP,GAAO,IAAItC,KAAI,WAAeuC,GAAU,mBAAvBT,EAAuB,KAAlBC,EAAkB,KACpE,OACE,gBAAChE,EAAD,CAAgB+D,IAAKS,GACnB,gBAAChE,EAAD,CAAiBuE,MAAM,QACrB,0BAAQd,MAAO,CAACe,cAAe,eAAgBjB,IAEjD,gBAACvD,EAAD,CAAiBuE,MAAM,UAAUf,gBA5G3DrC,EAAAA,MAAAA,SAAesD,EAAAA,qBAAsBC,EAAAA,WAAYC,EAAAA,WAAYC,EAAAA,iBAC7DzD,EAAAA,MAAAA,SAAe,CAAC0D,EAAAA","sources":["webpack://isomorphic-react/./src/host.js","webpack://isomorphic-react/./src/jsx/Visitors.jsx"],"sourcesContent":["export function hostInside() {\n  return process.env.NODE_ENV === 'production'\n    ? 'https://cheapcrypto.app'\n    : 'https://localhost:3000';\n}\n\nexport function hostOutside() {\n  return process.env.NODE_ENV === 'production'\n    ? 'https://cheapcrypto.app'\n    : 'https://localhost:3000';\n}\n","import React, {useEffect} from 'react';\nimport {Chart, Tooltip} from 'chart.js';\nimport {ChoroplethController, GeoFeature, ColorScale, ProjectionScale} from 'chartjs-chart-geo';\nimport * as ChartGeo from 'chartjs-chart-geo';\nimport {hostInside} from '../host';\nimport {useQuery} from 'react-query';\n\nimport {\n  Typography,\n  Avatar,\n  Stack,\n  Card,\n  Box,\n  Paper,\n  LinearProgress,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Alert,\n  Container,\n  useMediaQuery,\n} from '@mui/material';\nimport {tableCellClasses} from '@mui/material/TableCell';\nimport {styled} from '@mui/material/styles';\n\n// register controller in chart.js and ensure the defaults are set\nChart.register(ChoroplethController, GeoFeature, ColorScale, ProjectionScale);\nChart.register([Tooltip]);\n\nfunction alternatingRows(Row) {\n  return styled(Row)(({theme}) => ({\n    '&:nth-of-type(odd)': {\n      backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n      border: 0,\n    },\n  }));\n}\n\nexport default function Visitors() {\n  const StyledTableRow = alternatingRows(TableRow);\n  const StyledTableCell = styled(TableCell)(({theme}) => ({\n    [`&.${tableCellClasses.head}`]: {\n      backgroundColor: theme.palette.common.black,\n      color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n      fontSize: 14,\n    },\n  }));\n\n  const isDesktop = useMediaQuery('(min-width:620px)');\n\n  useEffect(async () => {\n    const countriesByVisitorsResponse = await fetch(`${hostInside()}/get-countries-by-visitors`);\n    const countriesByVisitors = await countriesByVisitorsResponse.json();\n\n    const atlasResponse = await fetch('https://unpkg.com/world-atlas/countries-50m.json');\n    const data = await atlasResponse.json();\n\n    const countries = ChartGeo.topojson.feature(data, data.objects.countries).features;\n    const chart = new Chart(document.getElementById('canvas').getContext('2d'), {\n      type: 'choropleth',\n      data: {\n        labels: countries.map(d => d.properties.name),\n        datasets: [\n          {\n            label: 'Countries',\n            data: countriesByVisitors,\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        showOutline: true,\n        showGraticule: false,\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n        scales: {\n          xy: {\n            projection: 'mercator',\n          },\n        },\n        aspectRatio: 1,\n      },\n    });\n  });\n\n  const {status, isLoading, error, data} = useQuery('visitCounts', async () => {\n    const response = await fetch(`/get-visit-counts`);\n    const data = await response.json();\n    return data;\n  });\n\n  if (isLoading) {\n    return (\n      <Box m={2}>\n        <Stack p={2} direction=\"row\" spacing={1}>\n          <LinearProgress />\n        </Stack>\n      </Box>\n    );\n  }\n\n  if (error) {\n    return 'An error has occurred: ' + error.message;\n  }\n\n  const visits = Object.entries(data).map(([key, value]) => ({[key]: value}));\n\n  return (\n    <div style={{position: 'relative', height: '100vh', width: '100vw'}}>\n      <canvas style={{paddingBottom: '40px'}} id=\"canvas\"></canvas>\n      <Stack direction={isDesktop ? 'row' : 'column'}>\n        {visits.map((visit, index) => {\n          return (\n            <Container key={`stack-${index}`} sx={{paddingBottom: '40px'}}>\n              <Typography variant=\"h6\" gutterBottom component=\"h2\">\n                {Object.keys(visit)[0]}\n              </Typography>\n              <TableContainer>\n                <Table>\n                  <TableBody>\n                    {Object.entries(Object.values(visit)[0]).map(([key, value], index) => {\n                      return (\n                        <StyledTableRow key={index}>\n                          <StyledTableCell align=\"left\">\n                            <strong style={{textTransform: 'capitalize'}}>{key}</strong>\n                          </StyledTableCell>\n                          <StyledTableCell align=\"center\">{value}</StyledTableCell>\n                        </StyledTableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            </Container>\n          );\n        })}\n      </Stack>\n    </div>\n  );\n}\n"],"names":["hostInside","hostOutside","Visitors","Row","StyledTableRow","styled","backgroundColor","theme","palette","action","hover","border","StyledTableCell","tableCellClasses","common","black","color","white","fontSize","isDesktop","useEffect","fetch","countriesByVisitorsResponse","json","countriesByVisitors","atlasResponse","data","countries","ChartGeo","objects","features","Chart","document","getElementById","getContext","type","labels","map","d","properties","name","datasets","label","options","responsive","showOutline","showGraticule","plugins","legend","display","scales","xy","projection","aspectRatio","useQuery","response","isLoading","status","error","m","p","direction","spacing","message","visits","Object","entries","key","value","style","position","height","width","paddingBottom","id","visit","index","sx","variant","gutterBottom","component","keys","values","align","textTransform","ChoroplethController","GeoFeature","ColorScale","ProjectionScale","Tooltip"],"sourceRoot":""}